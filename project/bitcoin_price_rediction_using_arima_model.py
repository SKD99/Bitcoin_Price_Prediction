# -*- coding: utf-8 -*-
"""Bitcoin Price Rediction Using ARIMA Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1adJO6ALeB2qfcX2rfdzSw5X2neZXxwJZ
"""

pip install yfinance

import yfinance as yf

df=yf.download('BTC-USD')

df

pip install statsmodels

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error, mean_absolute_error

plt.plot(df.index,df['Adj Close'])
plt.show()

# Train test split
to_row =int(len(df)*0.8)
training_data=list(df[0:to_row]['Adj Close'])
testing_data=list(df[0:to_row]['Adj Close'])

#split data into train and training dataset
plt.figure(figsize=(10,6))
plt.grid(True)
plt.xlabel('Dates')
plt.ylabel('Closing Prices')
plt.plot(df[0:to_row]['Adj Close'],'green',label='Train data')
plt.plot(df[to_row:]['Adj Close'],'blue',label='Test data')
plt.legend()

model_predictions=[]
n_test_obser=len(testing_data)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error, mean_absolute_error

for i in range(n_test_obser):
    model = ARIMA(training_data, order=(4, 1, 0))
    model_fit = model.fit()
    output = model_fit.forecast()
    yhat = output[0]  # Get the forecasted value directly
    model_predictions.append(yhat)
    actual_test_value=testing_data[i]
    training_data.append(actual_test_value)
    break

print(model_fit.summary())

len(testing_data)

plt.figure(figsize=(15,9))
plt.grid(True)
date_range = df[to_row:].index

start_index = 200
end_index = 400

plt.plot(date_range[start_index:end_index], model_predictions[start_index:end_index], color='blue', marker='o', linestyle='dashed', label='BTC predicted price')
plt.plot(date_range[start_index:end_index], testing_data[start_index:end_index], color='red', label='BTC Actual price')
plt.title('Bitcoin Price Prediction')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

# report performance
mape = np.mean(np.abs(np.array(model_predictions[:-1]) - testing_data[:517])) / np.abs(testing_data[:517])
print('MAPE: ' + str(mape))# Mean Absolute Percentage Error
#Around 3.8% MAPE(Mean Absolute Percentage Error)implies the model is about 96.2% accurate in predicting the test set observation.